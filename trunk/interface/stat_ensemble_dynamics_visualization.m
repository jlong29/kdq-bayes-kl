function stat_ensemble_dynamics_visualization(sed_output,time_line,events,mode_or_mean)
% This code provides a basic visualization tool for observing changes in the
% KL-divergence or population firing rate over time, or as they relate to 
% the ensemble data and/or behavioral events. It requires the input structure 
% 'sed_output' generated by the script 'stat_ensemble_dynamics.m'. All the axes
% are linked for panning and for horizontal zoom. 
%
% This is code from the paper "A Statiistical Description of Neural 
% Ensemble Dynamics," Long and Carmena 2011, submitted to  
% Frontiers in Computational Neuroscience.
% by: John D. Long II
% contact: jlong29@berkeley.edu or jlong29@gmail.com.
% Download at: http://code.google.com/p/kdq-bayes-kl
%
% INPUT
% sed_output - see 'stat_ensemble_dynamics.m' for the details of this structure
% time_line - (optional) This is a user generated vector of evenly spaced sample
%               time for marking ensemble samples to a moment in time
% events - (optional) is a structure with fields indicating the name of an event
%           of interest. The contents of the fields should be token timestamps
%           for each instance of an event.

% Argument checks
if ~isstruct(sed_output)
    error('Input must be a structure generated by the code ''stat_ensemble_dynamics.m''')
end
if nargin < 2
    time_line = [];
end
if nargin < 3
    events = [];
end
if ~isempty(events) && ~isstruct(events)
    error('''events'' must be passed as a structure with fields naming each event type of interest.')
end
if nargin < 4 || isempty(mode_or_mean) || ~strcmp(mode_or_mean,'mode') || ~strcmp(mode_or_mean,'mean')
    mode_or_mean = 'mode';
    disp('Mode of detrended ensemble data is used for mode of null hypothesis.')
end
    
% Handle event structure
if ~isempty(events)
    
    names = fieldnames(events);
    
    % Get event names
    if isempty(time_line) && ~isinteger(events.(names{1}))
        % Events should be passed as integer values indicating sample indices
        error('If no ''time_line'' variable is supplied, then all events must be integers indicating sample indices')
    end
end

% VARIABLES OF INTEREST FROM 'sed_output'
% basic data parameters
data      = sed_output.data;
T         = sed_output.T;
N         = sed_output.N;
bin       = sed_output.bin;

% Analysis results
KLs1      = sed_output.KLs1;
KLs2      = sed_output.KLs2;
if strcmp(mode_or_mean,'mode')
    m_KL1 = sed_output.md_KL1;
    m_KL2 = sed_output.md_KL2;
else
    m_KL1 = sed_output.mn_KL1;
    m_KL2 = sed_output.mn_KL2;
end
null_mod  = sed_output.null_model;

std_KL1    = sed_output.std_KL1;
std_KL2    = sed_output.std_KL2;
pop_fr     = sed_output.pop_fr;

m_pop_fr   = sed_output.m_pop_fr;
std_pop_fr = sed_output.std_pop_fr;

% Determine y-scaling in terms of standard deviations using inequalities. Here
% we also account for the different possible null hypotheses
if isnan(KLs2)
    yminkl1  = 1;
    KLs    = KLs1(KLs1>0);
    while m_KL1-yminkl1*std_KL1 > min(KLs)
        yminkl1 = yminkl1+1;
    end

    ymaxkl1 = 1;
    while m_KL1+ymaxkl1*std_KL1 < max(KLs)
        ymaxkl1 = ymaxkl1+1;
    end

    yminpfr = 1;
    temp = pop_fr(pop_fr>0);
    while m_pop_fr-yminpfr*std_pop_fr > min(temp)
        yminpfr = yminpfr+1;
    end

    ymaxpfr = 1;
    while m_pop_fr+ymaxpfr*std_pop_fr < max(temp)
        ymaxpfr = ymaxpfr+1;
    end

    if yminkl1 >= yminpfr
        ymin1 = yminkl1;
    else
        ymin1 = yminpfr;
    end

    if ymaxkl1 >= ymaxpfr
        ymax1 = ymaxkl1;
    else
        ymax1 = ymaxpfr;
    end
else
    yminkl1  = 1;
    KLs    = KLs1(KLs1>0);
    while m_KL1-yminkl1*std_KL1 > min(KLs)
        yminkl1 = yminkl1+1;
    end

    ymaxkl1 = 1;
    while m_KL1+ymaxkl1*std_KL1 < max(KLs)
        ymaxkl1 = ymaxkl1+1;
    end
    
    yminkl2  = 1;
    KLs    = KLs2(KLs2>0);
    while m_KL2-yminkl2*std_KL2 > min(KLs)
        yminkl2 = yminkl2+1;
    end

    ymaxkl2 = 1;
    while m_KL2+ymaxkl2*std_KL2 < max(KLs)
        ymaxkl2 = ymaxkl2+1;
    end

    yminpfr = 1;
    temp = pop_fr(pop_fr>0);
    while m_pop_fr-yminpfr*std_pop_fr > min(temp)
        yminpfr = yminpfr+1;
    end

    ymaxpfr = 1;
    while m_pop_fr+ymaxpfr*std_pop_fr < max(temp)
        ymaxpfr = ymaxpfr+1;
    end

    if yminkl1 >= yminpfr
        ymin1 = yminkl1;
    else
        ymin1 = yminpfr;
    end

    if ymaxkl1 >= ymaxpfr
        ymax1 = ymaxkl1;
    else
        ymax1 = ymaxpfr;
    end
    if yminkl2 >= yminpfr
        ymin2 = yminkl2;
    else
        ymin2 = yminpfr;
    end

    if ymaxkl2 >= ymaxpfr
        ymax2 = ymaxkl2;
    else
        ymax2 = ymaxpfr;
    end
end

%%% MAIN FIGURE %%%
%%%%%%%%%%%%%%%%%%%
scrnsz = get(0,'screensize');
figure('units','pixels','Position',scrnsz)
% Now plot out one of our 4 possible cases
if ~isempty(time_line) && isempty(events)
    % raster plot
    if isnan(KLs2)
        ax(1) = subplot(211); axis([time_line(1) time_line(end) 0.5 N+0.5]),hold on,
        plot(time_line(data(:,1)),data(:,2),'.k')
        ylabel('Unit #')
        xlabel('Time(sec)')
        title('Ensemble Raster Plot')

        % For KL-divergence time-series
        time = downsample(time_line,bin);
        % KL-divergence output
        ax(2) = subplot(212);hold on,
        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title(['KL-divergence and Ensemble Firing Rate: ' null_mod])
        xlabel('Time(sec)')
    else
        ax(1) = subplot(311); axis([time_line(1) time_line(end) 0.5 N+0.5]),hold on,
        plot(time_line(data(:,1)),data(:,2),'.k')
        ylabel('Unit #')
        xlabel('Time(sec)')
        title('Ensemble Raster Plot')

        % For KL-divergence time-series
        time = downsample(time_line,bin);
        % KL-divergence output
        ax(2) = subplot(312);hold on,
        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Independence')
        xlabel('Time(sec)')
        
        ax(3) = subplot(313);hold on,
        line([time(1) time(end)],[m_KL2 m_KL2],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL2+std_KL2 m_KL2+std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL2-std_KL2 m_KL2-std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [temp,h3,h4] = plotyy(time,KLs2,time,pop_fr,'Parent',ax(3)); hold on
        ylim(temp(1),[m_KL2-ymin2*std_KL2 m_KL2+ymax2*std_KL2])
        ylim(temp(2),[m_pop_fr-ymin2*std_pop_fr m_pop_fr+ymax2*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Derivative')
        xlabel('Time(sec)')
        tw = [tw temp];
    end
elseif ~isempty(time_line) && ~isempty(events)
    if isnan(KLs2)
        ax(1) = subplot(211); axis([time_line(1) time_line(end) 0.5 N+0.5]),hold on,
        % draw lines for each event
        cc    = lines(length(names));
        l_ax  = zeros(length(names),1);
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                if m == 1
                    l_ax(n) = line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:));
                else
                    line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:))
                end
            end
        end

        plot(time_line(data(:,1)),data(:,2),'.k')
        ylabel('Unit #')
        title('Ensemble Raster Plot')
        leg = legend(l_ax,names,'location','southoutside','orientation','horizontal');

        % For KL-divergence time-series
        time = downsample(time_line,bin);
        % KL-divergence output
        ax(2) = subplot(212);hold on,
        % draw lines for each event
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                line([event(m) event(m)],[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1],'color',cc(n,:))
            end
        end

        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title(['KL-divergence and Ensemble Firing Rate: ' null_mod])
        xlabel('Time(sec)')
    else
        ax(1) = subplot(311); axis([time_line(1) time_line(end) 0.5 N+0.5]),hold on,
        % draw lines for each event
        cc    = lines(length(names));
        l_ax  = zeros(length(names),1);
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                if m == 1
                    l_ax(n) = line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:));
                else
                    line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:))
                end
            end
        end

        plot(time_line(data(:,1)),data(:,2),'.k')
        ylabel('Unit #')
        title('Ensemble Raster Plot')
        leg = legend(l_ax,names,'location','southoutside','orientation','horizontal');

        % For KL-divergence time-series
        time = downsample(time_line,bin);
        % KL-divergence output
        ax(2) = subplot(312);hold on,
        % draw lines for each event
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                line([event(m) event(m)],[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1],'color',cc(n,:))
            end
        end

        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Independence')
        xlabel('Time(sec)')
        
        % KL-divergence output
        ax(3) = subplot(313);hold on,
        % draw lines for each event
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                line([event(m) event(m)],[m_KL2-ymin2*std_KL2 m_KL2+ymax2*std_KL2],'color',cc(n,:))
            end
        end

        line([time(1) time(end)],[m_KL2 m_KL2],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL2+std_KL2 m_KL2+std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL2-std_KL2 m_KL2-std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [temp,h3,h4] = plotyy(time,KLs2,time,pop_fr,'Parent',ax(3)); hold on
        ylim(temp(1),[m_KL2-ymin2*std_KL2 m_KL2+ymax2*std_KL2])
        ylim(temp(2),[m_pop_fr-ymin2*std_pop_fr m_pop_fr+ymax2*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Derivative')
        xlabel('Time(sec)')
        tw = [tw temp];
    end
elseif isempty(time_line) && isempty(events)
    if isnan(KLs2)
        ax(1) = subplot(211); axis([1 T 0.5 N+0.5]),hold on,
        plot(data(:,1),data(:,2),'.k')
        ylabel('Unit #')
        xlabel('Samples')
        title('Ensemble Raster Plot')

        % For KL-divergence time-series
        time = 1:bin:size(KLs1,1)*bin;
        % KL-divergence output
        ax(2) = subplot(212);hold on
        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title(['KL-divergence and Ensemble Firing Rate: ' null_mod])
        xlabel('Samples')
    else
        ax(1) = subplot(311); axis([1 T 0.5 N+0.5]),hold on,
        plot(data(:,1),data(:,2),'.k')
        ylabel('Unit #')
        xlabel('Samples')
        title('Ensemble Raster Plot')

        % For KL-divergence time-series
        time = 1:bin:size(KLs1,1)*bin;
        % KL-divergence output
        ax(2) = subplot(312);hold on
        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Independence')
        xlabel('Samples')
        
        ax(3) = subplot(313);hold on
        line([time(1) time(end)],[m_KL2 m_KL2],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL2+std_KL2 m_KL2+std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL2-std_KL2 m_KL2-std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [temp,h3,h4] = plotyy(time,KLs2,time,pop_fr,'Parent',ax(3)); hold on
        ylim(temp(1),[m_KL2-ymin2*std_KL2 m_KL2+ymax2*std_KL2])
        ylim(temp(2),[m_pop_fr-ymin2*std_pop_fr m_pop_fr+ymax2*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Derivative')
        xlabel('Samples')
        tw = [tw temp];
    end
elseif isempty(time_line) && ~isempty(events)
    if isnan(KLs2)    
        ax(1) = subplot(211); axis([1 T 0.5 N+0.5]),hold on,
        % draw lines for each event
        cc    = lines(length(names));
        l_ax  = zeros(length(names),1);
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                if m == 1
                    l_ax(n) = line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:));
                else
                    line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:))
                end
            end
        end

        plot(data(:,1),data(:,2),'.k')
        ylabel('Unit #')
        title('Ensemble Raster Plot')
        leg = legend(l_ax,names,'location','southoutside','orientation','horizontal');

        % For KL-divergence time-series
        time = 1:bin:size(KLs1,1)*bin;
        % KL-divergence output
        ax(2) = subplot(212);hold on
        % draw lines for each event
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                line([event(m) event(m)],[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1],'color',cc(n,:))
            end
        end

        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title(['KL-divergence and Ensemble Firing Rate: ' null_mod])
        xlabel('Samples')
    else
        ax(1) = subplot(311); axis([1 T 0.5 N+0.5]),hold on,
        % draw lines for each event
        cc    = lines(length(names));
        l_ax  = zeros(length(names),1);
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                if m == 1
                    l_ax(n) = line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:));
                else
                    line([event(m) event(m)],[0.5 N+0.5],'color',cc(n,:))
                end
            end
        end

        plot(data(:,1),data(:,2),'.k')
        ylabel('Unit #')
        title('Ensemble Raster Plot')
        leg = legend(l_ax,names,'location','southoutside','orientation','horizontal');
        
        % For KL-divergence time-series
        time = 1:bin:size(KLs1,1)*bin;
        % KL-divergence output
        ax(2) = subplot(312);hold on
        % draw lines for each event
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                line([event(m) event(m)],[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1],'color',cc(n,:))
            end
        end

        line([time(1) time(end)],[m_KL1 m_KL1],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL1+std_KL1 m_KL1+std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL1-std_KL1 m_KL1-std_KL1],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [tw,h1,h2] = plotyy(time,KLs1,time,pop_fr,'Parent',ax(2)); hold on
        ylim(tw(1),[m_KL1-ymin1*std_KL1 m_KL1+ymax1*std_KL1])
        ylim(tw(2),[m_pop_fr-ymin1*std_pop_fr m_pop_fr+ymax1*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Independence')
        xlabel('Samples')
        
        % KL-divergence output
        ax(3) = subplot(313);hold on
        % draw lines for each event
        for n = 1:length(names)
            event = events.(names{n});
            for m = 1:length(event)
                line([event(m) event(m)],[m_KL2-ymin2*std_KL2 m_KL2+ymax2*std_KL2],'color',cc(n,:))
            end
        end

        line([time(1) time(end)],[m_KL2 m_KL2],'color','k','linewidth',2)
        line([time(1) time(end)],[m_KL2+std_KL2 m_KL2+std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        line([time(1) time(end)],[m_KL2-std_KL2 m_KL2-std_KL2],'color',[0.3912 0.3990 0.350],'linewidth',2)
        [temp,h3,h4] = plotyy(time,KLs2,time,pop_fr,'Parent',ax(3)); hold on
        ylim(temp(1),[m_KL2-ymin2*std_KL2 m_KL2+ymax2*std_KL2])
        ylim(temp(2),[m_pop_fr-ymin2*std_pop_fr m_pop_fr+ymax2*std_pop_fr])
        title('KL-divergence and Ensemble Firing Rate: Derivative')
        xlabel('Samples')
        tw = [tw temp];
    end
end

% set axis specs
if isnan(KLs2)
    set(gcf,'currentaxes',tw(1))
    set(gca,'Ycolor',[0.1216    0.1216    0.1216])
    set(h1,'color',[0.1216    0.1216    0.1216])
    xlim([time(1) time(end)])
    temp1 = get(gca,'ylim');
    temp2 = (temp1(2)-temp1(1))/4;
    temp  = temp1(1):temp2:temp1(2);
    set(gca,'ytick',temp)
    ylabel('KL-Divergence')

    set(gcf,'currentaxes',tw(2))
    set(gca,'Ycolor','r')
    set(h2,'color','r')
    xlim([time(1) time(end)])
    temp1 = get(gca,'ylim');
    temp2 = (temp1(2)-temp1(1))/4;
    temp  = temp1(1):temp2:temp1(2);
    set(gca,'ytick',temp)
    ylabel('Ensemble Firing Rate')
else
    set(gcf,'currentaxes',tw(1))
    set(gca,'Ycolor',[0.1216    0.1216    0.1216])
    set(h1,'color',[0.1216    0.1216    0.1216])
    xlim([time(1) time(end)])
    temp1 = get(gca,'ylim');
    temp2 = (temp1(2)-temp1(1))/4;
    temp  = temp1(1):temp2:temp1(2);
    set(gca,'ytick',temp)
    ylabel('KL-Divergence')

    set(gcf,'currentaxes',tw(2))
    set(gca,'Ycolor','r')
    set(h2,'color','r')
    xlim([time(1) time(end)])
    temp1 = get(gca,'ylim');
    temp2 = (temp1(2)-temp1(1))/4;
    temp  = temp1(1):temp2:temp1(2);
    set(gca,'ytick',temp)
    ylabel('Ensemble Firing Rate')
    
    set(gcf,'currentaxes',tw(3))
    set(gca,'Ycolor',[0.1216    0.1216    0.1216])
    set(h3,'color',[0.1216    0.1216    0.1216])
    xlim([time(1) time(end)])
    temp1 = get(gca,'ylim');
    temp2 = (temp1(2)-temp1(1))/4;
    temp  = temp1(1):temp2:temp1(2);
    set(gca,'ytick',temp)
    ylabel('KL-Divergence')

    set(gcf,'currentaxes',tw(4))
    set(gca,'Ycolor','r')
    set(h4,'color','r')
    xlim([time(1) time(end)])
    temp1 = get(gca,'ylim');
    temp2 = (temp1(2)-temp1(1))/4;
    temp  = temp1(1):temp2:temp1(2);
    set(gca,'ytick',temp)
    ylabel('Ensemble Firing Rate')
end

axs = [ax tw];
linkaxes(axs,'x')
h = zoom;
q = pan;

for n = 1:length(axs)
    setAxesZoomMotion(h,axs(n),'horizontal');
    setAxesPanMotion(q,axs(n),'horizontal');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global figure Settings %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
set(findobj(gcf,'Type','axes'),'box','on')
if exist('leg','var')
    set(leg,'box','off')
end
set(gcf,'color','w')
